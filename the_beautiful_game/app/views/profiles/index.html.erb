<span><%= link_to 'Add Team', new_team_path %></span>
<br>
<span><%= link_to 'All Teams', teams_path %></span>



<% @profiles.each do |team|%>



<div class="teams">

<div class="profile-index">
<p><%= team[:team] %></p>

<p> <%= image_tag team[:flag] %>	</p>


<p>Founded: <%=  team[:founded] %></p>

<p>Moment Title: <%= team[:moment_title]%></p>

<p> Favorite Moment: <%= team[:youtube_id] %></p>
</div>
<!-- <div id="player"></div>

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: 'A5Cawf9GlfU',
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 12000000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>
 -->
</div>



<p><%= button_to 'Delete Team', team, :method => 'delete' %></p>


<% end %>